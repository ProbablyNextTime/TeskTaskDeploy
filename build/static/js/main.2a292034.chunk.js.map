{"version":3,"sources":["UserContext/index.tsx","Components/Login/styles.ts","service/api/user.ts","Components/Login/index.tsx","Components/SignUp/styles.ts","Components/SignUp/index.tsx","Components/CreateSusrvey/styles.ts","Utils/authHeader.ts","service/api/survey.ts","Components/CreateSusrvey/index.tsx","Components/SurveysBoard/styles.ts","Components/SurveysBoard/index.tsx","Components/Survey/styles.tsx","Components/Survey/index.tsx","Components/ThankYou/styles.ts","Components/ThankYou/index.tsx","Components/NotFound/styles.ts","Components/NotFound/index.tsx","Components/Routes/ProtectedRoute.tsx","Components/Routes/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialUserContext","user","username","localStorage","getItem","role","handleSettingUser","Error","reducer","state","action","type","payload","UserContext","React","createContext","UserContextProvider","props","useReducer","dispatch","Provider","value","setItem","children","useStyles","makeStyles","wrapper","height","width","display","justifyContent","alignItems","container","flexDirection","border","borderRadius","padding","form","fieldWrapper","margin","loginHeader","inputField","inputLabel","formControls","errorMessage","color","loginUserAPI","password","a","axios","post","response","data","accessToken","signUpUserAPI","SignInSchema","Yup","shape","min","max","required","Login","classes","history","useHistory","useState","setErrorMessage","userContext","useContext","onSubmit","useCallback","values","push","console","error","message","Box","className","Typography","variant","initialValues","validationSchema","name","component","TextField","InputProps","onFocus","root","Button","onClick","loginForm","SignUpSchema","confirmPassword","oneOf","undefined","SignUp","minHeight","minWidth","position","formContainer","tittleInputContainer","divider","addQuestionButton","left","bottom","createSurveyButton","right","deleteQButton","questionInput","questionContainer","alignSelf","justifySelf","authHeader","auth","Authorization","getSurveyAPI","surveyId","get","headers","survey","postSurveyAPI","questions","title","postSurveyAnswerAPI","answers","getAvailableSurveysAPI","surveys","surveySchema","of","CreateSurvey","handleSurveyCreation","length","render","arrayHelpers","map","question","index","key","remove","surveyLink","fontSize","adminBoardTitle","SurveysBoard","setSurveys","loading","setLoading","getSurveys","body","useEffect","loadSurveys","Link","_id","CircularProgress","answerField","maxWidth","maxHeight","justifyItems","surveyQuestion","progress","Survey","setSurvey","currentQuestions","setCurrentQuestions","currentPage","setCurrentPage","handleNext","from","to","Object","i","isQuestionsSetValid","slice","curPage","handlePrev","getSurvey","submitSurvey","initValues","getInitialValues","disabled","Math","ceil","LinearProgress","backButton","ThankYou","NotFound","RouteWrapper","isPrivate","rest","defaultProps","Routes","exact","path","params","match","survey_id","App","CssBaseline","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.2a292034.chunk.js","sourcesContent":["import React, { useReducer } from \"react\"\nimport { IUser } from \"Interfaces/user\"\n\nexport interface IUserContext {\n  user: Partial<IUser>\n  handleSettingUser: (user: IUserState) => void\n}\n\nexport interface IUserState {\n  user?: Partial<IUser>\n}\n\nconst initialUser: Partial<IUser> = {\n  username: localStorage.getItem(\"username\") || \"guest@guest.guest\",\n  role: localStorage.getItem(\"role\") || \"user\",\n}\n\nconst initialUserContext: IUserContext = {\n  user: initialUser,\n  handleSettingUser: (user: IUserState) => {\n    throw new Error(\"Method not implemented.\")\n  },\n}\n\nconst reducer = (state: IUserContext, action: any) => {\n  switch (action.type) {\n    case \"handleSettingUser\":\n      return {\n        ...state,\n        user: action.payload.user,\n      }\n    default:\n      return state\n  }\n}\n\nconst UserContext: React.Context<IUserContext> = React.createContext(initialUserContext)\n\nconst UserContextProvider = (props: any) => {\n  const [state, dispatch] = useReducer(reducer, initialUserContext)\n\n  return (\n    <UserContext.Provider\n      value={{\n        ...state,\n        handleSettingUser: (user: IUserState) => {\n          dispatch({ type: \"handleSettingUser\", payload: user })\n          localStorage.setItem(\"username\", user.user?.username || \"username\")\n          localStorage.setItem(\"role\", user.user?.role || \"user\")\n        },\n      }}\n    >\n      {props.children}\n    </UserContext.Provider>\n  )\n}\n\nexport { UserContextProvider, UserContext }\n","import { makeStyles } from \"@material-ui/styles\"\n\nconst useStyles = makeStyles(() => ({\n  wrapper: {\n    height: \"100vh\",\n    width: \"100vw\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  container: {\n    height: \"400px\",\n    width: \"350px\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    border: \"1px solid #003389\",\n    borderRadius: \"15px\",\n    padding: \"10px\",\n  },\n  form: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  fieldWrapper: {\n    margin: \"0 0 10px 0\",\n  },\n  loginHeader: {\n    margin: \"0 0 20px 0\",\n  },\n  inputField: {\n    height: \"40px\",\n  },\n  inputLabel: {\n    margin: \"0 0 6px 0\",\n  },\n  formControls: {\n    display: \"flex\",\n    padding: \"0 10px\",\n    margin: \"15px 0 0 0\",\n    width: \"240px\",\n    justifyContent: \"space-between\",\n  },\n  errorMessage: {\n    margin: \"10px 0 0 0\",\n    color: \"red\",\n  },\n}))\n\nexport default useStyles\n","import axios, {AxiosResponse} from \"axios\"\nimport { IUser } from \"Interfaces/user\"\n// axios.defaults.baseURL = process.env.REACT_APP_BASE_URL || ''\n\nexport const loginUserAPI = async (username: string, password: string): Promise<IUser> => {\n  const response: AxiosResponse = await axios.post(\"/login\", {\n    user: {\n      username: username,\n      password: password,\n    },\n  })\n  localStorage.setItem(\"accessToken\", response.data.accessToken)\n  return response.data.user\n}\n\nexport const signUpUserAPI = async (username: string, password: string): Promise<void> =>\n  await axios.post(\"/signUp\", {\n    user: {\n      username: username,\n      password: password,\n    },\n  })\n","import React from \"react\"\nimport { Formik, Form, Field } from \"formik\"\nimport { useHistory } from \"react-router-dom\"\nimport * as Yup from \"yup\"\nimport { IUser, ICredentials } from \"Interfaces/user\"\n\nimport useStyles from \"./styles\"\nimport { Box, Typography, Button } from \"@material-ui/core\"\nimport { TextField } from \"formik-material-ui\"\nimport { loginUserAPI } from \"service/api/user\"\nimport { UserContext } from \"UserContext\"\n\n// Validation schema for login form\nconst SignInSchema = Yup.object().shape({\n  username: Yup.string()\n    .min(2, \"Should be longer than 2 characters\")\n    .max(10, \"Should be shorter than 10 characters\")\n    .required(\"Required\"),\n  password: Yup.string()\n    .min(4, \"Should be longer than 4 characters\")\n    .max(10, \"Should be shorter than 10 characters\")\n    .required(\"Required\"),\n})\n\nconst Login = () => {\n  const classes = useStyles()\n\n  const history = useHistory()\n  // Holds error message if it exists\n  const [errorMessage, setErrorMessage] = React.useState(\"\")\n  const userContext = React.useContext(UserContext)\n\n  const onSubmit = React.useCallback(\n    async (values: ICredentials) => {\n      try {\n        // API call to login user\n        const user: IUser = await loginUserAPI(values.username, values.password)\n        // Set user context\n        userContext.handleSettingUser({ user: { username: user.username, role: user.role } })\n        // Redirect on success\n        history.push(\"/surveys\")\n      } catch (error) {\n        console.error(error)\n        setErrorMessage(error.response.data.message)\n      }\n    },\n    [history, userContext]\n  )\n\n  return (\n    <Box className={classes.wrapper}>\n      <Box className={classes.container}>\n        <Typography className={classes.loginHeader} variant={\"h4\"}>\n          {\" \"}\n          Login{\" \"}\n        </Typography>\n        <Formik\n          initialValues={{\n            username: \"\",\n            password: \"\",\n          }}\n          validationSchema={SignInSchema}\n          onSubmit={onSubmit}\n        >\n          {() => (\n            <Form className={classes.form}>\n              <Box className={classes.fieldWrapper}>\n                <Typography className={classes.inputLabel}>Username :</Typography>\n                <Field\n                  name=\"username\"\n                  variant={\"outlined\"}\n                  component={TextField}\n                  InputProps={{\n                    className: classes.inputField,\n                  }}\n                  onFocus={() => setErrorMessage(\"\")}\n                />\n              </Box>\n              <Box className={classes.fieldWrapper}>\n                <Typography className={classes.inputLabel}>Password :</Typography>\n                <Field\n                  name=\"password\"\n                  type={\"password\"}\n                  variant={\"outlined\"}\n                  component={TextField}\n                  InputProps={{\n                    classes: {\n                      root: classes.inputField,\n                    },\n                  }}\n                  onFocus={() => setErrorMessage(\"\")}\n                />\n              </Box>\n              <Box className={classes.formControls}>\n                <Button type=\"submit\" variant=\"outlined\" color={\"primary\"}>\n                  Login\n                </Button>\n                <Button type=\"button\" variant=\"outlined\" color={\"primary\"} onClick={() => history.push(\"/signUp\")}>\n                  Sign Up\n                </Button>\n              </Box>\n              {errorMessage && <Typography className={classes.errorMessage}>{errorMessage}</Typography>}\n            </Form>\n          )}\n        </Formik>\n      </Box>\n    </Box>\n  )\n}\n\nexport default Login\n","import { makeStyles } from \"@material-ui/styles\"\n\nconst useStyles = makeStyles(() => ({\n  wrapper: {\n    height: \"100vh\",\n    width: \"100vw\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  container: {\n    height: \"500px\",\n    width: \"350px\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    border: \"1px solid #003389\",\n    borderRadius: \"15px\",\n    padding: \"10px\",\n  },\n  loginHeader: {\n    margin: \"0 0 20px 0\",\n  },\n  loginForm: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  fieldWrapper: {\n    margin: \"0 0 10px 0\",\n  },\n  inputField: {\n    height: \"40px\",\n  },\n  inputLabel: {\n    margin: \"0 0 6px 0\",\n  },\n  formControls: {\n    display: \"flex\",\n    padding: \"0 10px\",\n    margin: \"15px 0 0 0\",\n    width: \"240px\",\n    justifyContent: \"space-between\",\n  },\n  errorMessage: {\n    margin: \"2px 0 0 0\",\n    color: \"red\",\n  },\n}))\n\nexport default useStyles\n","import React from \"react\"\nimport { Formik, Form, Field } from \"formik\"\nimport { useHistory } from \"react-router-dom\"\nimport * as Yup from \"yup\"\nimport { ICredentials } from \"Interfaces/user\"\nimport useStyles from \"./styles\"\nimport { Box, Typography, Button } from \"@material-ui/core\"\nimport { TextField } from \"formik-material-ui\"\nimport { signUpUserAPI } from \"service/api/user\"\n\n// Validation schema for signUp\nconst SignUpSchema = Yup.object().shape({\n  username: Yup.string()\n    .min(2, \"Should be longer than 2 characters\")\n    .max(10, \"Should be shorter than 10 characters\")\n    .required(\"Required\"),\n  password: Yup.string()\n    .min(4, \"Should be longer than 4 characters\")\n    .max(10, \"Should be shorter than 10 characters\")\n    .required(\"Required\"),\n  confirmPassword: Yup.string()\n    .oneOf([Yup.ref(\"password\"), undefined], \"Passwords should match\")\n    .required(\"Required\"),\n})\n\nconst SignUp = () => {\n  const history = useHistory()\n  // Holds error message if it exists\n  const [errorMessage, setErrorMessage] = React.useState(\"\")\n\n  const onSubmit = React.useCallback(\n    async (values: ICredentials) => {\n      try {\n        // API call to register new user\n        await signUpUserAPI(values.username, values.password)\n        // redirect on success signUp\n        history.push(\"/login\")\n      } catch (error) {\n        console.error(error)\n        setErrorMessage(error.response.data.message)\n      }\n    },\n    [history]\n  )\n\n  const classes = useStyles()\n\n  return (\n    <Box className={classes.wrapper}>\n      <Box className={classes.container}>\n        <Typography className={classes.loginHeader} variant={\"h4\"}>\n          Sign Up\n        </Typography>\n        <Formik\n          initialValues={{\n            username: \"\",\n            password: \"\",\n            confirmPassword: \"\",\n          }}\n          validationSchema={SignUpSchema}\n          onSubmit={onSubmit}\n        >\n          {() => (\n            <Form>\n              <Box className={classes.fieldWrapper}>\n                <Typography className={classes.inputLabel}>Username :</Typography>\n                <Field\n                  InputProps={{\n                    className: classes.inputField,\n                  }}\n                  variant={\"outlined\"}\n                  name=\"username\"\n                  onFocus={() => setErrorMessage(\"\")}\n                  component={TextField}\n                />\n              </Box>\n              <Box className={classes.fieldWrapper}>\n                <Typography className={classes.inputLabel}>Password :</Typography>\n                <Field\n                  InputProps={{\n                    className: classes.inputField,\n                  }}\n                  variant={\"outlined\"}\n                  type={\"password\"}\n                  name=\"password\"\n                  onFocus={() => setErrorMessage(\"\")}\n                  component={TextField}\n                />\n              </Box>\n              <Box className={classes.fieldWrapper}>\n                <Typography className={classes.inputLabel}>Confirm Password :</Typography>\n                <Field\n                  InputProps={{\n                    className: classes.inputField,\n                  }}\n                  variant={\"outlined\"}\n                  name=\"confirmPassword\"\n                  type={\"password\"}\n                  onFocus={() => setErrorMessage(\"\")}\n                  component={TextField}\n                />\n              </Box>\n              <Box className={classes.formControls}>\n                <Button color={\"primary\"} type=\"submit\" variant=\"outlined\">\n                  Sign Up\n                </Button>\n                <Button color={\"primary\"} type=\"button\" variant=\"outlined\" onClick={() => history.push(\"/login\")}>\n                  Login\n                </Button>\n              </Box>\n              {errorMessage && <Typography className={classes.errorMessage}>{errorMessage}</Typography>}\n            </Form>\n          )}\n        </Formik>\n      </Box>\n    </Box>\n  )\n}\n\nexport default SignUp\n","import { makeStyles } from \"@material-ui/styles\"\n\nconst useStyles = makeStyles(() => ({\n  wrapper: {\n    height: \"100vh\",\n    width: \"100vw\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    minHeight: \"500px\",\n    minWidth: \"600px\",\n    border: \"1px solid #003389\",\n    borderRadius: \"15px\",\n    padding: \"10px 25px\",\n    position: \"relative\",\n  },\n  formContainer: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"start\",\n    margin: \"15px 0 0 0\",\n    padding: \"0 0 60px 0\",\n  },\n  tittleInputContainer: {\n    display: \"flex\",\n  },\n  inputField: {\n    height: \"35px\",\n  },\n  divider: {\n    margin: \"10px 5px\",\n    height: \"1px\",\n    color: \"#003389\",\n    width: \"60%\",\n  },\n  addQuestionButton: {\n    position: \"absolute\",\n    left: \"40px\",\n    bottom: \"30px\",\n  },\n  createSurveyButton: {\n    position: \"absolute\",\n    right: \"40px\",\n    bottom: \"30px\",\n  },\n  deleteQButton: {\n    height: \"35px\",\n    margin: \"0 0 0 10px\",\n  },\n  questionInput: {\n    height: \"35px\",\n    width: \"350px\",\n  },\n  questionContainer: {\n    margin: \"0 0 10px 0\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    width: \"100%\",\n  },\n  errorMessage: {\n    display: \"flex\",\n    alignSelf: \"center\",\n    justifySelf: \"flex-end\",\n    margin: \"10px 0 0 0\",\n    color: \"red\",\n  },\n}))\n\nexport default useStyles\n","// get accessToken from local storage and wrap it as request header for auth\nexport default function authHeader() {\n  const auth: string = localStorage.getItem(\"accessToken\") || \"\"\n\n  if (auth) {\n    return { Authorization: `bearer ${auth}` }\n  } else {\n    return {}\n  }\n}\n","import { ISurvey } from \"Interfaces/survey\"\nimport axios from \"axios\"\nimport authHeader from \"Utils/authHeader\"\n// axios.defaults.baseURL = process.env.REACT_APP_BASE_URL || ''\n\nexport const getSurveyAPI = async (surveyId: string): Promise<ISurvey> =>\n  ((await axios.get(`/surveys/?Id=${surveyId}`, { headers: authHeader() })).data.survey as unknown) as ISurvey\n\nexport const postSurveyAPI = async (questions: string[], title: string): Promise<void> =>\n  await axios.post(\"/surveys\", { questions: questions, title: title }, { headers: authHeader() })\n\nexport const postSurveyAnswerAPI = async (answers: string[], surveyId: string): Promise<void> =>\n  await axios.post(\n    \"/surveys/postAnswer/\",\n    {\n      answers: answers,\n      surveyId: surveyId,\n    },\n    { headers: authHeader() }\n  )\n\nexport const getAvailableSurveysAPI = async (): Promise<ISurvey[]> =>\n  ((\n    await axios.get(\"/surveys\", {\n      headers: authHeader(),\n    })\n  ).data.surveys as unknown) as ISurvey[]\n","import React from \"react\"\nimport { useHistory } from \"react-router-dom\"\nimport useStyles from \"./styles\"\nimport { Box, Typography, Button } from \"@material-ui/core\"\nimport { FieldArray, Form, Field, Formik } from \"formik\"\nimport { TextField } from \"formik-material-ui\"\nimport * as Yup from \"yup\"\nimport { postSurveyAPI } from \"../../service/api/survey\"\nimport { UserContext } from \"../../UserContext\"\n\n// Survey validation schema\nconst surveySchema = Yup.object().shape({\n  questions: Yup.array().of(\n    Yup.string().min(5, \"Minimum length is 5\").required(\"Required\") // these constraints take precedence\n  ),\n  title: Yup.string().min(4, \"Minimum length is 4\").max(30, \"Maximum length is 30\").required(\"Required\"),\n})\n\nconst CreateSurvey = () => {\n  const classes = useStyles()\n\n  const history = useHistory()\n  // Holds error message if it exists\n  const [errorMessage, setErrorMessage] = React.useState<string>(\"\")\n  const userContext = React.useContext(UserContext)\n\n  const handleSurveyCreation = React.useCallback(\n    async (values) => {\n      // Check if survey contains at least 2 questions\n      if (values.questions.length < 2) {\n        setErrorMessage(\"Provide at least 2 questions\")\n        return\n      }\n\n      try {\n        // API call fot survey creation\n        await postSurveyAPI(values.questions, values.title)\n        // Redirect on successful creation of survey\n        history.push(\"/surveys\")\n      } catch (error) {\n        console.error(error)\n        setErrorMessage(error.response.data.message)\n      }\n    },\n    [history]\n  )\n\n  return (\n    <Box className={classes.wrapper}>\n      {userContext.user.role === \"admin\" ? (\n        <Box className={classes.container}>\n          <Typography variant={\"h4\"}>Create new survey</Typography>\n          <Formik\n            initialValues={{\n              questions: [],\n              title: \"\",\n            }}\n            validationSchema={surveySchema}\n            onSubmit={handleSurveyCreation}\n          >\n            {({ values }) => (\n              <Form className={classes.formContainer}>\n                <Typography variant={\"body1\"}>Title:</Typography>\n                <Field\n                  InputProps={{\n                    className: classes.inputField,\n                  }}\n                  type={\"text\"}\n                  name={\"title\"}\n                  variant={\"outlined\"}\n                  component={TextField}\n                />\n                <hr className={classes.divider} />\n                <FieldArray\n                  name={\"questions\"}\n                  render={(arrayHelpers) => (\n                    <>\n                      {\n                        //  Display input fields for survey questions\n                        values.questions &&\n                          values.questions.length > 0 &&\n                          values.questions.map((question: string, index) => (\n                            <div key={index} className={classes.questionContainer}>\n                              <Field\n                                name={`questions.${index}`}\n                                InputProps={{\n                                  classes: {\n                                    root: classes.questionInput,\n                                  },\n                                }}\n                                variant={\"outlined\"}\n                                component={TextField}\n                              />\n                              <Button\n                                className={classes.deleteQButton}\n                                type=\"button\"\n                                variant={\"outlined\"}\n                                color={\"secondary\"}\n                                onClick={() => arrayHelpers.remove(index)} // remove a friend from the list\n                              >\n                                Remove\n                              </Button>\n                            </div>\n                          ))\n                      }\n                      <Button\n                        className={classes.addQuestionButton}\n                        type=\"button\"\n                        onClick={() => {\n                          arrayHelpers.push(\"\")\n                          setErrorMessage(\"\")\n                        }}\n                        variant={\"outlined\"}\n                        color={\"primary\"}\n                      >\n                        Add a question\n                      </Button>\n                      {errorMessage && <Typography className={classes.errorMessage}>{errorMessage}</Typography>}\n                    </>\n                  )}\n                />\n                <Button className={classes.createSurveyButton} type={\"submit\"} variant={\"outlined\"} color={\"primary\"}>\n                  Create survey\n                </Button>\n              </Form>\n            )}\n          </Formik>\n        </Box>\n      ) : (\n        <Typography variant={\"h4\"}>Not found 404</Typography>\n      )}\n    </Box>\n  )\n}\n\nexport default CreateSurvey\n","import { makeStyles } from \"@material-ui/styles\"\n\nconst useStyles = makeStyles(() => ({\n  wrapper: {\n    height: \"100vh\",\n    width: \"100vw\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    minHeight: \"500px\",\n    minWidth: \"400px\",\n    border: \"1px solid #003389\",\n    borderRadius: \"15px\",\n    padding: \"10px 10px 50px 10px\",\n    position: \"relative\",\n  },\n  surveyLink: {\n    fontSize: \"20px\",\n    alignSelf: \"start\",\n    margin: \"10px 0 0 0\",\n  },\n  errorMessage: {\n    margin: \"2px 0 0 0\",\n    color: \"red\",\n  },\n  adminBoardTitle: {\n    color: \"#003389\",\n    fontSize: \"20px\",\n    alignSelf: \"start\",\n    margin: \"10px 0 0 0\",\n  },\n  createSurveyButton: {\n    position: \"absolute\",\n    bottom: \"20px\",\n    left: \"30px\",\n  },\n}))\n\nexport default useStyles\n","import React from \"react\"\nimport { useHistory } from \"react-router-dom\"\nimport { ISurvey } from \"Interfaces/survey\"\n\nimport useStyles from \"./styles\"\nimport { Box, Typography, Link, Button, CircularProgress } from \"@material-ui/core\"\nimport { getAvailableSurveysAPI } from \"service/api/survey\"\nimport { UserContext } from \"UserContext\"\n\nconst SurveysBoard = () => {\n  const history = useHistory()\n  // Holds all available surveys\n  const [surveys, setSurveys] = React.useState<ISurvey[]>([])\n  // Holds error message if it exists\n  const [errorMessage, setErrorMessage] = React.useState(\"\")\n  const [loading, setLoading] = React.useState(true)\n\n  const userContext = React.useContext(UserContext)\n\n  // Gets all user`s uncompleted surveys from server\n  const getSurveys = React.useCallback(async () => {\n    try {\n      const surveys: ISurvey[] = await getAvailableSurveysAPI()\n      setSurveys(surveys)\n    } catch (error) {\n      console.error(error)\n      setErrorMessage(error.response.body.message)\n    }\n  }, [])\n\n  React.useEffect(() => {\n    const loadSurveys = async () => {\n      await getSurveys()\n      // set loading to false to display dashboard\n      setLoading(false)\n    }\n\n    loadSurveys()\n  }, [getSurveys, setLoading])\n\n  const classes = useStyles()\n\n  return (\n    <Box className={classes.wrapper}>\n      {surveys.length > 0 || userContext.user.role === \"admin\" ? (\n        <Box className={classes.container}>\n          <Typography variant={\"h4\"}>\n            {userContext.user.role === \"user\" ? \"Available surveys:\" : \"Admin dashboard\"}\n          </Typography>\n          {surveys.map((survey, key) => {\n            return (\n              <>\n                {userContext.user.role === \"user\" ? (\n                  <Link\n                    className={classes.surveyLink}\n                    key={key}\n                    component={\"button\"}\n                    onClick={() => history.push(`/survey/${survey._id}`)}\n                  >\n                    {`${key + 1}) ${survey.title}`}\n                  </Link>\n                ) : (\n                  <Typography className={classes.adminBoardTitle}>{`${key + 1}) ${survey.title}`}</Typography>\n                )}\n              </>\n            )\n          })}\n          {userContext.user.role === \"admin\" && (\n            <Button\n              variant={\"outlined\"}\n              color={\"primary\"}\n              className={classes.createSurveyButton}\n              type={\"button\"}\n              onClick={() => history.push(\"/createSurvey\")}\n            >\n              Create survey\n            </Button>\n          )}\n          {errorMessage && <Typography className={classes.errorMessage}>{errorMessage}</Typography>}\n        </Box>\n      ) : loading ? (\n        <CircularProgress />\n      ) : (\n        <Typography variant={\"h4\"}>No surveys are available for you</Typography>\n      )}\n    </Box>\n  )\n}\n\nexport default SurveysBoard\n","import { makeStyles } from \"@material-ui/styles\"\n\nconst useStyles = makeStyles(() => ({\n  wrapper: {\n    height: \"100vh\",\n    width: \"100vw\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  answerField: {\n    height: \"100px\",\n    width: \"500px\",\n    maxWidth: \"700px\",\n    maxHeight: \"150px\",\n  },\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyItems: \"center\",\n  },\n  formControls: {\n    minWidth: \"300px\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    padding: \"5px\",\n  },\n  surveyQuestion: {\n    margin: \"0 0 8px 0\",\n  },\n  progress: {\n    margin: \"10px 0 0 0\",\n  },\n  errorMessage: {\n    margin: \"2px 0 0 0\",\n    color: \"red\",\n  },\n}))\n\nexport default useStyles\n","import React from \"react\"\nimport { useHistory } from \"react-router-dom\"\nimport { ISurvey } from \"Interfaces/survey\"\nimport { Field, Form, Formik } from \"formik\"\nimport useStyles from \"./styles\"\nimport { Box, Typography, Button, LinearProgress } from \"@material-ui/core\"\nimport { getSurveyAPI, postSurveyAnswerAPI } from \"service/api/survey\"\n\ninterface ISurveyProps {\n  surveyId: string\n}\n\nconst questionsOnPage = 3\n\nconst Survey = ({ surveyId }: ISurveyProps) => {\n  const history = useHistory()\n  // State for current survey\n  const [survey, setSurvey] = React.useState<ISurvey>()\n  // Holds questions which are displayed\n  const [currentQuestions, setCurrentQuestions] = React.useState<string[]>([])\n  // Holds current page\n  const [currentPage, setCurrentPage] = React.useState<number>(1)\n  // Holds error message if it exists\n  const [errorMessage, setErrorMessage] = React.useState<string>(\"\")\n\n  // Validation before going to the next step checks if all the fields\n  // that are displayed are not empty\n  const isQuestionsSetValid = (from: number, to: number, values: object): boolean => {\n    if (survey) {\n      // values is object that has property 'values' with object (which values is our answers)\n      const answers: string[] = Object.values(Object.values(values)[0])\n      for (let i = from; i < to; i++) {\n        if (!answers[i]) {\n          return false\n        }\n      }\n    }\n    return true\n  }\n\n  // Display next questions handler\n  const handleNext = (values: object) => {\n    // Check if all the questions that are displayed have an answer\n    if (!isQuestionsSetValid((currentPage - 1) * questionsOnPage, currentPage * questionsOnPage, values)) {\n      setErrorMessage(\"Fill all the fields\")\n      return\n    }\n\n    if (survey) {\n      // Set the next set of questions from survey entity\n      setCurrentQuestions(survey.questions.slice(currentPage * questionsOnPage, (currentPage + 1) * questionsOnPage))\n    }\n\n    // increment current page\n    setCurrentPage((curPage) => curPage + 1)\n  }\n\n  // Display previous questions handler\n  const handlePrev = () => {\n    if (survey) {\n      // Set the previous set of questions from survey entity\n      setCurrentQuestions(\n        survey.questions.slice((currentPage - 2) * questionsOnPage, (currentPage - 1) * questionsOnPage)\n      )\n    }\n\n    // decrement current page\n    setCurrentPage((curPage) => curPage - 1)\n  }\n\n  // Returns object with survey's questions as keys and\n  // empty strings as values for Formik initialValues prop\n  const getInitialValues = (): object => {\n    let initValues: object = {}\n    if (survey) {\n      for (let i = 0; i < survey.questions.length; i++) {\n        const question: object = { [survey.questions[i]]: \"\" }\n        initValues = { ...initValues, ...question }\n      }\n    }\n    return initValues\n  }\n\n  // Gets survey from server\n  const getSurvey = React.useCallback(\n    async (surveyId: string) => {\n      try {\n        // API call to get survey\n        const survey: ISurvey = await getSurveyAPI(surveyId)\n        setSurvey(survey)\n        // set start questions\n        setCurrentQuestions(survey.questions.slice(0, questionsOnPage))\n      } catch (error) {\n        console.error(error)\n        setErrorMessage(error.response.data.message)\n      }\n    },\n    [setSurvey]\n  )\n\n  React.useEffect(() => {\n    getSurvey(surveyId)\n  }, [getSurvey, surveyId])\n\n  // Survey submit handler\n  const submitSurvey = React.useCallback(\n    async (values) => {\n      try {\n        // Converts values`s  question -- answer pairs to array of answers\n        const answers: string[] = Object.values(values)\n        // API call ot post survey answers\n        await postSurveyAnswerAPI(answers, surveyId)\n        // Redirect on success\n        history.push(\"/thankYou\")\n      } catch (error) {\n        console.error(error)\n        setErrorMessage(error.response.data.message)\n      }\n    },\n    [surveyId, history]\n  )\n\n  const classes = useStyles()\n\n  return (\n    <Box className={classes.wrapper}>\n      {survey && (\n        <Formik initialValues={getInitialValues()} onSubmit={submitSurvey}>\n          {(values) => (\n            <Form className={classes.container}>\n              {currentQuestions.map((question, index) => {\n                return (\n                  <Box key={index} className={classes.surveyQuestion}>\n                    <Typography>{question}</Typography>\n                    <Field\n                      className={classes.answerField}\n                      variant={\"outlined\"}\n                      onFocus={() => setErrorMessage(\"\")}\n                      name={question}\n                      component={\"textarea\"}\n                    />\n                  </Box>\n                )\n              })}\n\n              <Box className={classes.formControls}>\n                <Button\n                  color={\"primary\"}\n                  variant={\"outlined\"}\n                  type={\"button\"}\n                  onClick={handlePrev}\n                  disabled={currentPage === 1}\n                >\n                  Back\n                </Button>\n                {survey && Math.ceil(survey.questions.length / questionsOnPage) === currentPage && (\n                  <Button color={\"primary\"} variant={\"outlined\"} type={\"submit\"}>\n                    Submit\n                  </Button>\n                )}\n\n                {survey && Math.ceil(survey.questions.length / questionsOnPage) !== currentPage && (\n                  <Button color={\"primary\"} variant={\"outlined\"} type={\"button\"} onClick={() => handleNext(values)}>\n                    Next\n                  </Button>\n                )}\n              </Box>\n              {errorMessage !== \"\" && <Typography className={classes.errorMessage}>{errorMessage}</Typography>}\n              <LinearProgress\n                variant={\"determinate\"}\n                // get the percent of completed questions ( (completedQuestions / allQuestions) * 100%  )\n                value={survey ? (((currentPage - 1) * questionsOnPage) / survey?.questions.length) * 100 : 0}\n                className={classes.progress}\n              />\n            </Form>\n          )}\n        </Formik>\n      )}\n    </Box>\n  )\n}\n\nexport default Survey\n","import { makeStyles } from \"@material-ui/styles\"\n\nconst useStyles = makeStyles(() => ({\n  wrapper: {\n    height: \"100vh\",\n    width: \"100vw\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  backButton: {\n    margin: \"20px 0 0 0\",\n  },\n}))\n\nexport default useStyles\n","import React from \"react\"\nimport { useHistory } from \"react-router-dom\"\n\nimport useStyles from \"./styles\"\nimport { Box, Typography, Button } from \"@material-ui/core\"\n\nconst ThankYou = () => {\n  const history = useHistory()\n\n  const classes = useStyles()\n\n  return (\n    <Box className={classes.wrapper}>\n      <Typography variant={\"h4\"}>Thank you for your time</Typography>\n      <Button\n        className={classes.backButton}\n        variant={\"outlined\"}\n        color={\"primary\"}\n        onClick={() => history.push(\"/surveys\")}\n      >\n        Back\n      </Button>\n    </Box>\n  )\n}\n\nexport default ThankYou\n","import { makeStyles } from \"@material-ui/styles\"\n\nconst useStyles = makeStyles(() => ({\n  wrapper: {\n    height: \"100vh\",\n    width: \"100vw\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n}))\n\nexport default useStyles\n","import React from \"react\"\nimport useStyles from \"./styles\"\nimport { Box, Typography } from \"@material-ui/core\"\n\n// Default component for not existing routes\nconst NotFound = () => {\n  const classes = useStyles()\n\n  return (\n    <Box className={classes.wrapper}>\n      <Typography variant={\"h4\"}>Not found 404</Typography>\n    </Box>\n  )\n}\n\nexport default NotFound\n","import * as React from \"react\"\nimport { Route, Redirect, RouteProps } from \"react-router-dom\"\nimport PropTypes from \"prop-types\"\n\n// THIS SHOULD BE IN THE SAME FOLDER AS THE RAOUTES COMPONENT NOT in ./src\n\n// A wrapper around react-router-dom Route for easier handling of private routes\n// via isPrivate boolean flag\ninterface IRouteWrapperProps<T> extends RouteProps {\n  component?: React.FC<T>\n  isPrivate: boolean\n}\n\nconst isLoggedIn = (): boolean => {\n  return (localStorage.getItem(\"accessToken\") as unknown) as boolean\n}\n\nexport default function RouteWrapper<T>({ component, isPrivate, ...rest }: IRouteWrapperProps<T>) {\n  // A wrapper component around the react-router-dom Route that controls access to resources\n  // isPrivate flag should be used to make the Route available only to logged in users\n  // if user isn`t logged in redirect to /login\n  if (isPrivate && !isLoggedIn()) {\n    return <Redirect to=\"/login\" />\n  }\n\n  return <Route {...rest} component={component} />\n}\n\nRouteWrapper.propTypes = {\n  isPrivate: PropTypes.bool,\n}\n\nRouteWrapper.defaultProps = {\n  isPrivate: false,\n}\n","import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\"\nimport Login from \"Components/Login\"\nimport SignUp from \"Components/SignUp\"\nimport CreateSurvey from \"Components/CreateSusrvey\"\nimport SurveysBoard from \"Components/SurveysBoard\"\nimport Survey from \"Components/Survey\"\nimport ThankYou from \"Components/ThankYou\"\nimport NotFound from \"Components/NotFound\"\nimport React from \"react\"\nimport ProtectedRoute from \"./ProtectedRoute\"\n\nfunction Routes() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/login\" component={Login} />\n        <Route exact path=\"/signUp\" component={SignUp} />\n        <ProtectedRoute isPrivate exact path=\"/createSurvey\" component={CreateSurvey} />\n        <ProtectedRoute isPrivate exact path=\"/surveys\" component={SurveysBoard} />\n        <ProtectedRoute\n          isPrivate\n          exact\n          path=\"/survey/:survey_id\"\n          render={({ match: { params } }) => <Survey surveyId={params.survey_id} />}\n        />\n        <Route exact path={\"/thankYou\"} component={ThankYou} />4\n        <Route path={\"/\"} component={NotFound} />\n      </Switch>\n    </Router>\n  )\n}\n\nexport default Routes\n","import React from \"react\"\nimport { CssBaseline } from \"@material-ui/core\"\nimport { UserContextProvider } from \"./UserContext\"\nimport Routes from \"Components/Routes\"\nfunction App() {\n  return (\n    <CssBaseline>\n      <UserContextProvider>\n        <Routes />\n      </UserContextProvider>\n    </CssBaseline>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\")\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}